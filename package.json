{
  "name": "opentype.js",
  "description": "OpenType font parser",
  "author": {
    "name": "Frederik De Bleser",
    "email": "frederik@debleser.be"
  },
  "keywords": [
    "graphics",
    "fonts",
    "font",
    "opentype",
    "otf",
    "ttf",
    "woff",
    "type"
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/opentypejs/opentype.js.git"
  },
  "main": "./dist/opentype.js",
  "browser": "./dist/opentype.js",
  "module": "./dist/opentype.mjs",
  "scripts": {
    "build": "npm run b:umd && npm run b:esm",
    "dist": " npm run d:umd && npm run d:esm",
    "test": "npm run build && npm run dist && mocha && npm run lint",
    "lint": "eslint src --ext .js,.mjs",
    "lint-fix": "eslint src --fix --ext .js,.mjs",
    "start": "esbuild --bundle src/opentype.mjs --outdir=dist --target=es2018 --format=esm  --out-extension:.js=.mjs     --define:DEBUG=false --global-name=opentype --watch --servedir=. --footer:js=\"(function (root, factory) { if (typeof define === 'function' && define.amd)define(factory); else if (typeof module === 'object' && module.exports)module.exports = factory(); else root.opentype = factory(); }(typeof self !== 'undefined' ? self : this, () => ({...opentype,'default':opentype})));\" --footer:js=\"new EventSource('/esbuild').addEventListener('change', () => location.reload())\"",
    "b:umd": "esbuild --bundle src/opentype.mjs --outdir=dist --target=es2018 --format=iife --out-extension:.js=.js      --define:DEBUG=false --global-name=opentype                      --footer:js=\"(function (root, factory) { if (typeof define === 'function' && define.amd)define(factory); else if (typeof module === 'object' && module.exports)module.exports = factory(); else root.opentype = factory(); }(typeof self !== 'undefined' ? self : this, () => ({...opentype,'default':opentype})));\"",
    "d:umd": "esbuild --bundle src/opentype.mjs --outdir=dist --target=es2018 --format=iife --out-extension:.js=.min.js  --define:DEBUG=false --global-name=opentype --minify --sourcemap --footer:js=\"(function (root, factory) { if (typeof define === 'function' && define.amd)define(factory); else if (typeof module === 'object' && module.exports)module.exports = factory(); else root.opentype = factory(); }(typeof self !== 'undefined' ? self : this, () => ({...opentype,'default':opentype})));\"",
    "b:esm": "esbuild --bundle src/opentype.mjs --outdir=dist --target=es2018 --format=esm  --out-extension:.js=.mjs     --define:DEBUG=false",
    "d:esm": "esbuild --bundle src/opentype.mjs --outdir=dist --target=es2018 --format=esm  --out-extension:.js=.min.mjs --define:DEBUG=false --minify --sourcemap"
  },
  "devDependencies": {
    "mocha": "^10.4.0",
    "esbuild": "^0.20.0",
    "eslint": "^8.56.0",
    "eslint-plugin-import": "^2.29.1",
    "eslint-plugin-local-rules": "^2.0.1"
  },
  "bin": {
    "ot": "./bin/ot"
  },
  "files": [
    "dist"
  ],
  "sideEffects": false,
  "eslintConfig": {
    "env": {
      "browser": true,
      "es2021": true,
      "node": true
    },
    "plugins": [
      "eslint-plugin-local-rules",
      "eslint-plugin-import"
    ],
    "extends": "eslint:recommended",
    "parserOptions": {
      "ecmaVersion": 2018,
      "sourceType": "module"
    },
    "rules": {
      "import/no-cycle": [
        "error"
      ],
      "indent": [
        "error",
        4,
        {
          "SwitchCase": 1
        }
      ],
      "linebreak-style": [
        "error",
        "unix"
      ],
      "quotes": [
        "error",
        "single"
      ],
      "semi": [
        "error",
        "always"
      ],
      "local-rules/ban-foreach": 2,
      "local-rules/import-extensions": 2
    }
  }
}
